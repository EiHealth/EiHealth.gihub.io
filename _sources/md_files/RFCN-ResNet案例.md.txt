# RFCN-ResNet案例

- [配置文件](##配置文件)
- [使用](##使用)



ResNet案例以一个二分类任务为例，`features`数据`little_exp.tsv`包含100个samples，23361个features。

```bash
> wc little_exp.tsv | awk '{print $1}'  # 打印行数
100
> sed -n '1,1p' little_exp.tsv | awk '{print NF}'  # 打印列数
23361
```

`target`数据为两类，分别为70和30。

```bash
> grep -c 0 little_learning_target.tsv
70
> grep -c 1 little_learning_target.tsv
30
```



首先，准备配置文件，具体如下所示：

## 配置文件

```javascript
{
    "name": "resnet_demo",  // Project name

    "model": {
        "type": "ResNet",
        "args": {
            "output_classes": 2}  // 分类数目
    },

    "data_train": {
        "type": "DataLoader",
        "args":{
            "data_dir": "/data_autogenome/data_test",  //数据所在文件夹，推荐使用绝对路径
            "features_file": "little_exp.tsv",   //features文件名
            "labels_file": "little_learning_target.tsv",   //target文件名
            "validation_split": 0.2,  //验证集比例
            "shuffle": true,  //训练时是否对数据进行打乱操作
            "delimiter": " "  //数据分隔符，default: '\t'
        }
    },

    "data_evaluate": {
        "type": "DataLoader",
        "args": {
            "data_dir": "/data_autogenome/data_test",
            "features_file": "little_exp.tsv",  //用于单独评估的features文件名
            "labels_file": "little_learning_target.tsv",  //用于单独评估的target文件名
            "delimiter": " "
        }
    },

    "data_predict": {
        "type": "DataLoader",
        "args": {
            "data_dir": "/data_autogenome/data_test",
            "features_file": "little_exp.tsv",  //用于单独预测的features文件名
            "delimiter": " "
        }
    },

    "input_fn": {
        "num_threads": 16  //读取数据线程数
    },

    "trainer": {
        "hyper_selector": true,  //[true/false]，是否进行超参搜索
        "batch_size": 64,  //每次训练的样本数大小
        "save_dir": "./experiments",  //保存日志、模型参数、结果输出的文件夹名称
        "monitor": "accuracy",  //[accuracy/loss/f1_score]，训练过程中在验证集上评估指标
        "num_gpus": 1,  //机器可使用gpu个数
        "patience": 30,   //连续多少个epoch后在验证集上效果没有再提升，则停止训练
        "pre_train_epoch": 10,  //超参搜索阶段，每组参数训练的epoch数目
        "max_steps": 64000,  //训练最大运行的steps，当patience很大时则会训练max_steps步，max_steps*batch_size/num_samples为对应训练的epoch数
        "loss": "cross_entropy",
        "selected_mode": "max"   //[max/min]验证集上评估指标是越大越好还是越小越好
    },

    "optimizer": {
        "type": "adam"  //[adam/sgd/adadelta/adagrad/adamw/ftrl/momentum/rmsprop/kfac/dynamic_momentum/lamb]
    },

    "evaluator": {
        "max_number_of_steps": 10,
        "batch_size":100
    },

    "predictor": {
        "log_every_n_steps": 10,
        "output_every_n_steps": 1,
        "max_number_of_steps": 100,
        "batch_size":100
    },

    "explainer": {
        "args": {
            "features_name_file": "/data_autogenome/data_test/names_2.txt",  //变量名文件，一列，行数为变量个数
            "plot_type": "bar",  //[bar/dot/violin/layered_violin]
            "num_samples": 80,  //使用的样本数
            "ranked_outputs": 20  //输出变量重要性前多少个
        }
    },

    "param_spec": {   //模型初始参数
        "type": "origin_params",
        "args": {
            "ResNet": {
                "n_latent": 32,
                "n_blocks": 2,
                "keep_prob": 0.8,
                "output_nonlinear": "sigmoid"
            },
            "optimizer_param": {
                "learning_rate": 0.0001
            }
        }
    },

    "hyper_param_spec": {    //超参搜索空间
        "type": "hyper_params",
        "args": {
            "ResNet": {
                "n_latent": [128, 64, 32],
                "n_blocks": [2, 3],
                "keep_prob": [0.8, 1.0],
                "output_nonlinear": [null, "relu", "tanh", "sigmoid"]
            },
            "optimizer_param": {

            }
        }
}
}

```



## 使用

AutoGenome的使用主要包含以下几步：

1. 导入autogenome包

   ```python
   import autogenome as ag
   ```

2. 读取配置文件，配置文件如上述所示

   ```python
   automl = ag.auto("/data_autogenome/data_test/json_hub_simple/resnet_test.json")
   ```

   配置文件读取成功后，会打印如下日志：

   ```javascript
   ==========================================================
   ----------Use the config from /data_autogenome/data_test/json_hub_simple/resnet_test.json
   ----------Initialize data_loader class
   ----------Initialize Optimizer
   ----------Initialize hyper_param_spec class 
   ----------Initialize param_spec class 
   ==========================================================
   #################################################################################
   #                                                                               #
   #                                                                               #
            Ready to search the best hyper parameters for ResNet model            
   #                                                                               #
   #                                                                               #
   #################################################################################
   ```

   

3. 训练模型。根据配置文件中训练参数进行模型训练，将数据集划分为训练集:验证集为8:2，使用训练集数据进行训练，同时在验证集数据上进行评估，保存在验证集数据上评价指标（trainer.monitor: "accuracy"）更好的模型和参数到相应文件夹（trainer.saver: "./experiments"）中的`models`文件夹中

   ```python
   automl.train()
   ```

   训练过程中，先将模型初始化为`param_spec`中参数，然后在超参搜索空间`hyper_param_spec`中进行参数搜索，每一种参数组合会训练一定的epoch数（trainer.pre_train_epoch），挑选结果最好的作为最终模型结构参数并进行进一步训练，训练过程中在验证集上进行评估，当结果更好时保存模型参数，在连续数个epoch（trainer.patience）后在验证集上效果没有再提升，则停止训练。

   训练过程中部分日志如下:

   ```javascript
   ----------In Hyper & Training Search stage 
   ...
   Pretraining: search parameter is n_latent, search value is 32
   LR_RANGE_TEST From begin_lr 0.000010 To end_lr 0.100000, 
   Graph was finalized.
   Running local_init_op.
   Done running local_init_op.
   Running will end at step: 10
   step: 0(global step: 0)	sample/sec: 141.683	loss: 0.674	accuracy: 0.609
   ...
   [Plateau Metric] step: 163 loss: 1.213 accuracy: 0.828
   [Plateau Metric] step: 165 loss: 0.726 accuracy: 0.906
   Saving checkpoints for 166 into experiments/models/resnet_demo/1218_160039/hyper_lr0.08500150000000001_keep_prob_0.8_n_latent_128_output_nonlinear_None_n_blocks_2/best_model.ckpt.
   [Plateau Metric] step: 167 loss: 1.827 accuracy: 0.828
   [Plateau Metric] step: 169 loss: 1.776 accuracy: 0.828
   [Plateau Metric] step: 171 loss: 0.910 accuracy: 0.891
   [Plateau Metric] step: 173 loss: 0.207 accuracy: 0.984
   Saving checkpoints for 174 into experiments/models/resnet_demo/1218_160039/hyper_lr0.08500150000000001_keep_prob_0.8_n_latent_128_output_nonlinear_None_n_blocks_2/best_model.ckpt.
   [Plateau Metric] step: 175 loss: 0.181 accuracy: 0.984
   ...
   ```

   

4. 评估模型。根据上步所训练的模型结构及模型参数，评估在`data_evaluate`上表现，分类模型输出`accuracy`值和`confusion matrix`

   ```python
   automl.evaluate()
   ```

   部分日志如下所示：

   ```javascript
   ----------In Evaluation stage 
   Restoring parameters from experiments/models/resnet_demo/1218_160039/hyper_lr0.08500150000000001_keep_prob_0.8_n_latent_128_output_nonlinear_None_n_blocks_2/best_model.ckpt-200
   Running local_init_op.
   Done running local_init_op.
   step: 1	batch/sec: 117.715	loss: 0.007	accuracy: 1.000
   step: 3	batch/sec: 133.102	loss: 0.007	accuracy: 1.000
   step: 5	batch/sec: 115.314	loss: 0.007	accuracy: 1.000
   step: 7	batch/sec: 103.886	loss: 0.007	accuracy: 1.000
   step: 9	batch/sec: 99.960	loss: 0.007	accuracy: 1.000
   ...
   loss: 0.006915087699890137	accuracy: 1.0		[100 batches]
   Confusion matrix plot is 'experiments/output_files/resnet_demo/1218_160039/ResNet_confusion_matrix.pdf'
   ```

   得到的confusion matrix图如下所示，图数字大小会根据类别数多少进行调整，x轴为真值，y轴为预测值：

   ![](../images/resnet_confusion_matrix.png)

   

5. 预测数据。根据第3步所训练的模型结构及模型参数，对于给定features数据，分类问题预测其类别及各个类别的softmax值，并输出到对应的csv文件中

   ```python
   automl.predict()
   ```

   日志如下所示：

   ```javascript
   ----------In Prediction stage 
   Graph was finalized.
   Restoring parameters from experiments/models/resnet_demo/1218_160039/hyper_lr0.08500150000000001_keep_prob_0.8_n_latent_128_output_nonlinear_None_n_blocks_2/best_model.ckpt-200
   Running local_init_op.
   Done running local_init_op.
   step: 9	batch/sec: 110.194
   	[10 batches]
   Predicted values file is "experiments/output_files/resnet_demo/1218_160039/ResNet_predicted_result_data_frame.csv"
   ```

   如日志所示，将输出预测的target文件，文件第一列`predicted_result`，第二列`softmax_value`为各个类别的softmax值。

6. 变量重要性排序。根据第3步所训练的模型结构及模型参数，对变量重要性进行排序，输出各个类别变量重要性，`explainer`中需要指定变量名对应的文件。

   ```python
   automl.explain()
   ```

   对模型变量重要性进行排序，输出日志如下：

   ```javascript
   ----------Initialize Shap class
   Restoring parameters from experiments/models/resnet_demo/1218_160039/hyper_lr0.08500150000000001_keep_prob_0.8_n_latent_128_output_nonlinear_None_n_blocks_2/best_model.ckpt-200
   ----------Computing shap_values with 80  examples and 23361 features
   importance plot is 'experiments/output_files/resnet_demo/1218_160039/_dot0_feature_importance_summary.pdf'
   importance plot is 'experiments/output_files/resnet_demo/1218_160039/_dot1_feature_importance_summary.pdf'
   features orders in all classes is saved in 'experiments/output_files/resnet_demo/1218_160039/_features_orders.csv'
   importance plot for every classes is 'experiments/output_files/resnet_demo/1218_160039/class_1feature_importance_summary.pdf'
   importance plot for every classes is 'experiments/output_files/resnet_demo/1218_160039/class_0feature_importance_summary.pdf'
   importance plot is 'experiments/output_files/resnet_demo/1218_160039/_barTotal_feature_importance_summary.pdf'
   shap_values every classes is 'experiments/output_files/resnet_demo/1218_160039/_class_0shap_values.csv'
   shap_values every classes is 'experiments/output_files/resnet_demo/1218_160039/_class_1shap_values.csv
   ```

   运行结束后将输出各个类别的变量重要性条图和点图和总的变量重要性图，如下所示：

   总的变量重要性图：
   ![](/images/resnet_total_feature_importance_summary.png)

   class 1变量重要性条图：
   ![](/images/resnet_class1_feature_importance_summary_bar.png)
   
   class 0变量重要性条图：
   ![](/images/resnet_class0_feature_importance_summary_bar.png)
   
   class 1变量重要性点图：
   ![](/images/resnet_class1_feature_importance_summary_dot.png)
   
   class 0变量重要性点图：
   ![](/images/resnet_class0_feature_importance_summary_dot.png)
